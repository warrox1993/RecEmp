// src/app/app.component.ts
// VERSION FINALE CORRIG√âE AVEC LOGIQUE POUR LA PAGE D'ACCUEIL

import { Component, OnInit, Signal, OnDestroy } from '@angular/core';
import { Router, RouterModule, RouterOutlet, NavigationEnd, Event as RouterEvent } from '@angular/router'; // Ajout de Event et RouterEvent
import { CommonModule } from '@angular/common';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';

// Imports Angular Material (s'assurer qu'ils sont bien dans imports de @Component)
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule } from '@angular/material/menu';
import { MatBadgeModule } from '@angular/material/badge';
import { MatListModule } from '@angular/material/list';
import { MatDividerModule } from '@angular/material/divider';

// Services et Mod√®les
import { AuthService } from './services/auth.service'; // Assurez-vous que le chemin est correct
import { User } from './models/user.model'; // Assurez-vous que le chemin est correct
import { NotificationService } from './services/notification.service'; // Assurez-vous que le chemin est correct
import { AppNotification } from './models/notification.model'; // Assurez-vous que le chemin est correct

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    CommonModule,
    RouterOutlet,
    RouterModule, // N√©cessaire pour routerLink
    MatToolbarModule,
    MatIconModule,
    MatButtonModule,
    MatMenuModule,
    MatBadgeModule,
    MatListModule,
    MatDividerModule
  ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit, OnDestroy {
  title = 'ProTrack CV';
  currentYear = new Date().getFullYear();

  // Signaux pour l'√©tat de l'application
  currentUser!: Signal<User | null>;
  isAuthenticated!: Signal<boolean>;
  notifications!: Signal<AppNotification[]>;
  unreadNotificationsCount!: Signal<number>;

  // Propri√©t√© pour d√©terminer si la page actuelle est la page d'accueil
  isHomePage: boolean = false;
  private routerSubscription!: Subscription;

  // Informations de d√©bogage
  debugInfo = {
    authServiceReady: false,
    notificationServiceReady: false,
    signalsInitialized: false,
    errorMessage: '',
    currentRoute: ''
  };

  constructor(
    public authService: AuthService, // Doit √™tre public si utilis√© dans le template
    public notificationService: NotificationService, // Doit √™tre public si utilis√© dans le template
    private router: Router
  ) {
    console.log('üîß AppComponent constructor - Initialisation...');

    try {
      // V√©rification de la disponibilit√© des services
      if (!authService) { throw new Error('AuthService non disponible ou non inject√©.'); }
      this.debugInfo.authServiceReady = true;
      if (!notificationService) { throw new Error('NotificationService non disponible ou non inject√©.'); }
      this.debugInfo.notificationServiceReady = true;

      // Initialisation des signaux
      // Ces signaux doivent √™tre d√©finis dans vos services AuthService et NotificationService
      this.currentUser = this.authService.currentUser;
      this.isAuthenticated = this.authService.isAuthenticated;
      this.notifications = this.notificationService.notifications;
      this.unreadNotificationsCount = this.notificationService.unreadCount;

      this.debugInfo.signalsInitialized = true;
      console.log('‚úÖ AppComponent: Signals initialis√©s.');

    } catch (error: any) {
      console.error('‚ùå Erreur critique dans AppComponent constructor:', error);
      this.debugInfo.errorMessage = `Erreur constructor: ${error.message || error}`;
    }
    console.log('üîß AppComponent constructor - Fin.');
    console.log('Initial Debug Info:', this.debugInfo);
  }

  ngOnInit(): void {
    console.log('üîß AppComponent ngOnInit - D√©marrage...');

    // Abonnement aux √©v√©nements de navigation pour d√©tecter la page d'accueil
    this.routerSubscription = this.router.events.pipe(
      filter((event: RouterEvent): event is NavigationEnd => event instanceof NavigationEnd)
    ).subscribe((event: NavigationEnd) => {
      // La page d'accueil est g√©n√©ralement la racine '/'
      // ou une route sp√©cifique comme '/home' ou '/accueil'
      // Adaptez la condition si votre route d'accueil est diff√©rente.
      this.isHomePage = (event.urlAfterRedirects === '/' || event.urlAfterRedirects === '/home');
      this.debugInfo.currentRoute = event.urlAfterRedirects;
      console.log(`‚û°Ô∏è Navigation vers: ${event.urlAfterRedirects}, Page d'accueil d√©tect√©e: ${this.isHomePage}`);
    });

    // Affichage de l'√©tat initial des signaux (pour le d√©bogage)
    try {
      console.log('üë§ CurrentUser (initial):', this.currentUser ? this.currentUser() : 'Signal non initialis√©');
      console.log('üîë IsAuthenticated (initial):', this.isAuthenticated ? this.isAuthenticated() : 'Signal non initialis√©');
      console.log('üîî Notifications count (initial):', this.notifications ? (this.notifications().length) : 'Signal non initialis√©');
      console.log('üî¢ Unread notifications (initial):', this.unreadNotificationsCount ? this.unreadNotificationsCount() : 'Signal non initialis√©');
    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'acc√®s initial aux signaux dans ngOnInit:', error);
      this.debugInfo.errorMessage += ` Erreur ngOnInit signals: ${error.message || error}`;
    }
    console.log('üîß AppComponent ngOnInit - Fin.');
  }

  ngOnDestroy(): void {
    // Nettoyage de l'abonnement pour √©viter les fuites de m√©moire
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
      console.log('üóëÔ∏è AppComponent ngOnDestroy - Abonnement au routeur d√©sinscrit.');
    }
  }

  // M√©thode pour obtenir l'ic√¥ne de notification bas√©e sur son type
  getNotificationIcon(type: AppNotification['type']): string {
    switch (type) {
      case 'rappel': return 'event_note'; // Ic√¥ne pour les rappels
      case 'info': return 'info_outline';   // Ic√¥ne pour les informations
      case 'succes': return 'check_circle_outline'; // Ic√¥ne pour les succ√®s
      case 'erreur': return 'error_outline';    // Ic√¥ne pour les erreurs
      default: return 'notifications'; // Ic√¥ne par d√©faut
    }
  }

  // Gestion du clic sur une notification
  onNotificationClick(notification: AppNotification): void {
    console.log(`üñ±Ô∏è Clic sur notification: ID=${notification.id}, Lue=${notification.isRead}`);
    try {
      if (!notification.isRead) {
        this.notificationService.markAsRead(notification.id);
      }
      if (notification.link) {
        this.router.navigateByUrl(notification.link);
        console.log(`üîó Redirection vers: ${notification.link}`);
      }
    } catch (error: any) {
      console.error('‚ùå Erreur lors du clic sur la notification:', error);
      // Afficher une notification d'erreur √† l'utilisateur si n√©cessaire
    }
  }

  // Marquer toutes les notifications comme lues
  markAllNotificationsAsRead(): void {
    console.log('üì¨ Marquage de toutes les notifications comme lues...');
    try {
      this.notificationService.markAllAsRead();
    } catch (error: any) {
      console.error('‚ùå Erreur lors du marquage de toutes les notifications comme lues:', error);
    }
  }

  // Gestion de la d√©connexion de l'utilisateur
  logout(): void {
    console.log('üö™ Tentative de d√©connexion...');
    try {
      this.authService.logout(); // Le service AuthService devrait g√©rer la redirection
      // this.router.navigate(['/login']); // Redirection explicite si non g√©r√©e par le service
      console.log('‚úÖ D√©connexion r√©ussie.');
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la d√©connexion:', error);
    }
  }
}
